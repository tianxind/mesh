#include <Eigen/Core>
#include <Eigen/Eigenvalues>
#include "curvature.h"
using namespace OpenMesh;
using namespace Eigen;
using namespace std;

void computeCurvature(Mesh &mesh, OpenMesh::VPropHandleT<CurvatureInfo> &curvature) {

	int matched = 0;
	Eigen::Matrix3d I = Matrix3d::Ones();
	
	for (Mesh::VertexIter v_it = mesh.vertices_begin(); v_it != mesh.vertices_end(); ++v_it) {
		const Vec3f & vertex_iF = mesh.point(v_it.handle());
		const Vec3f & vertexNormal_iF = mesh.normal(v_it.handle());
		
		Vector3d v_i(vertex_iF[0], vertex_iF[1], vertex_iF[2]);
		Vector3d N_i(vertexNormal_iF[0], vertexNormal_iF[1], vertexNormal_iF[2]);

		Vector3d avgNor(0,0,0);
		double sumWeight = 0.0;
		Eigen::Matrix3d M = Matrix3d::Zero();
		//for (Mesh::VertexVertexIter vv_v_it = mesh.vv_iter(v_it); vv_v_it; ++vv_v_it) {
		for (Mesh::VertexOHalfedgeIter voh_v_it = mesh.voh_iter(v_it); voh_v_it; ++voh_v_it) {
			const Vec3f & vertex_jF = mesh.point(mesh.to_vertex_handle(voh_v_it));
			Vector3d v_j(vertex_jF[0], vertex_jF[1], vertex_jF[2]);
			
			// Calculate tangent vector
			Vector3d T_i = (I - N_i * N_i.transpose()) * (v_i - v_j);
			T_i.normalize();
			
			// Calculate curvature
			Vector3d v_ji = v_j - v_i;
			double kappa = N_i.dot(v_ji) * 2.0 / v_ji.squaredNorm();

			// Calculate weight
			double w_ij = 0.0;
			w_ij += mesh.calc_sector_area(voh_v_it.handle());
			//Vec3f n1 = mesh.normal(voh_v_it.handle());
			//avgNor += w_ij * Vector3d(n1[0], n1[1], n1[2]);
			//double tmp = mesh.calc_sector_area(mesh.opposite_halfedge_handle(voh_v_it.handle()));
			w_ij += mesh.calc_sector_area(mesh.opposite_halfedge_handle(voh_v_it.handle()));
			//Vec3f n2 = mesh.normal(mesh.opposite_halfedge_handle(voh_v_it.handle()));
			//avgNor += tmp * Vector3d(n2[0], n2[1], n2[2]);
			
			//if (mesh.is_boundary(voh_v_it.handle()) || mesh.is_boundary(mesh.opposite_halfedge_handle(voh_v_it.handle())))
			//	exit(0);
			/*for (Mesh::VertexOHalfedgeIter voh_v_it = mesh.voh_iter(v_it); voh_v_it; ++voh_v_it) {
				Vec3f to_vertex = mesh.point(mesh.to_vertex_handle(voh_v_it));
				Vec3f dist = to_vertex - v_j;
				Vector3d dist_vec(dist[0], dist[1], dist[2]);
				if (dist_vec.norm() < 0.001) {
					matched++;
					w = mesh.calc_sector_area(voh_v_it.handle());
					if (!mesh.is_boundary(voh_v_it))
						w += mesh.calc_sector_area(mesh.opposite_halfedge_handle(voh_v_it.handle()));
				}
			}*/

			
			M += (w_ij * kappa) * (T_i * T_i.transpose());
			sumWeight += w_ij;
		}
		// Normalize M
		M /= sumWeight;
		avgNor /= sumWeight;
		//std::cout << avgNor << std::endl;
		//std::cout << N_i << std::endl;
		//std::cout << std::endl;
		
		// Find the two igenvectors
		EigenSolver<Matrix3d> solver(M);
		int store = 0;
		CurvatureInfo info;
		for (int i = 0; i < 3; ++i) {
			Vector3d v = solver.pseudoEigenvectors().block(0, i, 3, 1);
			double eig = real(solver.eigenvalues()(i));
			if (abs(eig) > 1e-6) {
				info.curvatures[store] = eig;
				info.directions[store++] = Vec3f(v[0], v[1],v[2]);
			}
		} 
		mesh.property(curvature, v_it) = info;
		// ------------------------------------------------------------------------------------------------
	}
	cout << "Matches found: " << matched << endl;
}
